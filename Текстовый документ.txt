Вот пошаговая инструкция для выполнения действий в командной строке Git (Git CMD) на основе предоставленных материалов:
1. Создать репозиторий для учебного проекта
Создать папку для проекта:
mkdir ProjectFolder cd ProjectFolder 
Инициализировать локальный репозиторий:
git init 
1.3 Совершить несколько коммитов
1.3.1. Добавить файл main.cpp:
Создать файл main.cpp с содержимым:
#include "sdt.h" int main() { return 0; } 
Добавить файл sdt.h в папку проекта.
Добавить файлы в индекс и сделать первый коммит:
git add main.cpp sdt.h git commit -m "Добавлены файлы main.cpp и sdt.h" 
1.3.2. Добавить ввод двух чисел:
Изменить main.cpp для добавления ввода чисел:
#include "sdt.h" #include <iostream> using namespace std; int main() { int a, b; cout << "Введите два числа: "; cin >> a >> b; return 0; } 
Сохранить изменения, добавить в индекс и сделать второй коммит:
git add main.cpp git commit -m "Добавлен ввод двух чисел" 
1.4. Настроить .gitignore
Создать файл .gitignore в корне проекта:
echo "*.o" >> .gitignore echo "*.exe" >> .gitignore 
Добавить файл .gitignore в индекс и сделать коммит:
git add .gitignore git commit -m "Добавлен .gitignore для игнорирования временных файлов" 
1.5. Добавить вывод суммы чисел
Изменить main.cpp:
#include "sdt.h" #include <iostream> using namespace std; int main() { int a, b; cout << "Введите два числа: "; cin >> a >> b; cout << "Сумма: " << (a + b) << endl; return 0; } 
Сохранить изменения, добавить в индекс и сделать коммит:
git add main.cpp git commit -m "Добавлен вывод суммы введённых чисел" 
1.6. Просмотреть историю коммитов
git log --oneline 
1.7. Просмотреть разницу между пунктами 1.3.2 и 1.5
Посмотреть разницу: git diff <commit1_hash> <commit2_hash> Замените <commit1_hash> и <commit2_hash> на хэши коммитов из истории (git log --oneline).
2. Организовать удалённое хранилище на GitHub
2.1. Создать удалённый репозиторий:
Зарегистрироваться на GitHub.
Создать новый репозиторий без README.md.
2.2. Подключить локальный репозиторий к удалённому:
Добавить удалённое хранилище:
git remote add origin <URL_удалённого_репозитория> 
Замените <URL_удалённого_репозитория> на адрес вашего репозитория (например, https://github.com/username/repo.git).
Передать изменения на сервер:
git push -u origin main 
2.4. Клонировать репозиторий
С другого компьютера или каталога: git clone <URL_удалённого_репозитория> 
2.5. Симулировать параллельную работу
2.5.1. Изменить файл в локальном репозитории RepoB:
Добавить печать разности чисел:
cout << "Разность: " << (a - b) << endl; 
Сохранить изменения, добавить и закоммитить:
git add main.cpp git commit -m "Добавлен вывод разности чисел" 
Передать изменения на сервер:
git push 
2.5.2. Изменить файл в локальном репозитории RepoA:
Добавить комментарий в main.cpp:
// Программа является учебной 
Сохранить изменения и закоммитить:
git add main.cpp git commit -m "Добавлен комментарий о учебной цели программы" 
Не выполнять git push.
2.6. Просмотреть изменения на GitHub
Открыть вкладку Commits в удалённом репозитории через веб-интерфейс.
Если у вас есть дополнительные вопросы или что-то непонятно, уточняйте!